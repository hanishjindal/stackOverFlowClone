{"ast":null,"code":"var _jsxFileName = \"F:\\\\StackoverflowClone\\\\client\\\\components\\\\auth-forms\\\\forgot-password\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { Formik, validateYupSchema } from 'formik';\nimport * as Yup from 'yup';\nimport { publicFetch } from '../../../util/fetcher';\nimport { AuthContext } from '../../../store/auth';\nimport ModalContext from '../../../store/modal';\nimport FormInput from '../../form-input';\nimport Button from '../../button';\nimport styles from './forgot-password.module.css';\n\nconst ForgotPasswordForm = () => {\n  const {\n    setAuthState\n  } = useContext(AuthContext);\n  const {\n    setIsComponentVisible\n  } = useContext(ModalContext);\n  const {\n    0: isSent,\n    1: setSent\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const changeClass = val => {\n    val.match(/^[a-zA-Z0-9]+@+[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$/) ? setSent(true) : setSent(false);\n  };\n\n  return __jsx(Formik, {\n    initialValues: {\n      email: ''\n    },\n    onSubmit: async (values, {\n      setStatus,\n      resetForm\n    }) => {\n      setLoading(true);\n\n      try {\n        const {\n          data\n        } = await publicFetch.post('authenticate', values);\n        const {\n          token,\n          expiresAt,\n          userInfo\n        } = data;\n        setAuthState({\n          token,\n          expiresAt,\n          userInfo\n        });\n        resetForm({});\n        setIsComponentVisible(false);\n      } catch (error) {\n        setStatus(error.response.data.message);\n      }\n\n      setLoading(false);\n    },\n    validationSchema: Yup.object({\n      email: Yup.string().required('Required').matches(/^[a-zA-Z0-9]+@+[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$/, 'Please Enter A Valid Email')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    status,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    className: styles.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }), __jsx(\"center\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }\n  }, \"Forgot your account\\u2019s password?\")), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, \"Enter your email address and we\\u2019ll send you a recovery link.\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }), __jsx(FormInput, {\n    label: \"Email\",\n    type: \"text\",\n    name: \"email\",\n    autoComplete: \"off\",\n    value: values.email,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.email && errors.email,\n    errorMessage: errors.email && errors.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }), __jsx(\"p\", {\n    className: styles.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, status), __jsx(Button, {\n    primary: true,\n    full: true,\n    className: styles.submitButton,\n    type: \"changePassword\",\n    isLoading: loading,\n    disabled: isSubmitting,\n    onClick: () => {\n      changeClass(values.email);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Send recovery email\"), __jsx(\"p\", {\n    className: styles.forgotContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }), __jsx(\"center\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    className: isSent ? styles.forgotContentShow : styles.forgotContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 19\n    }\n  }, \"Password Recovery Mail Sent\"))));\n};\n\nexport default ForgotPasswordForm;","map":{"version":3,"sources":["F:/StackoverflowClone/client/components/auth-forms/forgot-password/index.js"],"names":["React","useState","useContext","Formik","validateYupSchema","Yup","publicFetch","AuthContext","ModalContext","FormInput","Button","styles","ForgotPasswordForm","setAuthState","setIsComponentVisible","isSent","setSent","loading","setLoading","changeClass","val","match","email","values","setStatus","resetForm","data","post","token","expiresAt","userInfo","error","response","message","object","string","required","matches","errors","touched","status","handleChange","handleBlur","handleSubmit","isSubmitting","form","submitButton","forgotContent","forgotContentShow"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { Formik, validateYupSchema } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nimport { publicFetch } from '../../../util/fetcher'\r\nimport { AuthContext } from '../../../store/auth'\r\nimport ModalContext from '../../../store/modal'\r\n\r\nimport FormInput from '../../form-input'\r\nimport Button from '../../button'\r\n\r\nimport styles from './forgot-password.module.css'\r\n\r\nconst ForgotPasswordForm = () => {\r\n  const { setAuthState } = useContext(AuthContext)\r\n  const { setIsComponentVisible } = useContext(ModalContext)\r\n  const [ isSent, setSent ] = useState(false)\r\n  const [loading, setLoading] = useState(false);\r\n  const changeClass = (val) => {\r\n     val.match(/^[a-zA-Z0-9]+@+[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$/) ?\r\n     setSent(true) : setSent(false)\r\n  };\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: '' }}\r\n      onSubmit={async (values, { setStatus, resetForm }) => {\r\n        setLoading(true)\r\n        try {\r\n          const { data } = await publicFetch.post('authenticate', values)\r\n          const { token, expiresAt, userInfo } = data\r\n          setAuthState({ token, expiresAt, userInfo })\r\n          resetForm({})\r\n          setIsComponentVisible(false)\r\n        } catch (error) {\r\n          setStatus(error.response.data.message)\r\n        }\r\n        setLoading(false)\r\n      }}\r\n      validationSchema={Yup.object({\r\n        email: Yup.string()\r\n          .required('Required')\r\n          .matches(/^[a-zA-Z0-9]+@+[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$/, 'Please Enter A Valid Email'),\r\n      })}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        status,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting\r\n      }) => (\r\n        <form onSubmit={handleSubmit} className={styles.form}>\r\n          <br />\r\n          <center><p>Forgot your account’s password?</p></center>\r\n          <br />\r\n          <p>Enter your email address and we’ll send you a recovery link.</p>\r\n          <br />\r\n          <FormInput\r\n            label=\"Email\"\r\n            type=\"text\"\r\n            name=\"email\"\r\n            autoComplete=\"off\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            hasError={touched.email && errors.email}\r\n            errorMessage={errors.email && errors.email}\r\n          />\r\n          <p className={styles.status}>{status}</p>\r\n          <Button\r\n            primary\r\n            full\r\n            className={styles.submitButton}\r\n            type=\"changePassword\"\r\n            isLoading={loading}\r\n            disabled={isSubmitting}\r\n            onClick={()=>{changeClass(values.email)}}\r\n          >\r\n            Send recovery email\r\n          </Button>\r\n          <p className={styles.forgotContent}></p>\r\n          <br/>\r\n          <center><p className={isSent ? styles.forgotContentShow : styles.forgotContent }>Password Recovery Mail Sent</p></center>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default ForgotPasswordForm\r\n"]},"metadata":{},"sourceType":"module"}