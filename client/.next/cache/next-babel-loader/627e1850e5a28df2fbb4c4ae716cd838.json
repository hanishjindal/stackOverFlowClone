{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\StackoverflowClone\\\\client\\\\components\\\\auth-forms\\\\forgot-password\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { Formik, validateYupSchema } from 'formik';\nimport * as Yup from 'yup';\nimport { publicFetch } from '../../../util/fetcher';\nimport { AuthContext } from '../../../store/auth';\nimport ModalContext from '../../../store/modal';\nimport FormInput from '../../form-input';\nimport Button from '../../button';\nimport styles from './forgot-password.module.css';\n\nvar ForgotPasswordForm = function ForgotPasswordForm() {\n  _s();\n\n  var _useContext = useContext(AuthContext),\n      setAuthState = _useContext.setAuthState;\n\n  var _useContext2 = useContext(ModalContext),\n      setIsComponentVisible = _useContext2.setIsComponentVisible;\n\n  var _useState = useState(false),\n      isSent = _useState[0],\n      setSent = _useState[1];\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var changeClass = function changeClass(val) {\n    val.match(/^[a-zA-Z0-9]+@+[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$/) ? setSent(true) : setSent(false);\n  };\n\n  return __jsx(Formik, {\n    initialValues: {\n      email: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref) {\n        var setStatus, resetForm, _yield$publicFetch$po, data, token, expiresAt, userInfo;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setStatus = _ref.setStatus, resetForm = _ref.resetForm;\n                setLoading(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return publicFetch.post('authenticate', values);\n\n              case 5:\n                _yield$publicFetch$po = _context.sent;\n                data = _yield$publicFetch$po.data;\n                token = data.token, expiresAt = data.expiresAt, userInfo = data.userInfo;\n                setAuthState({\n                  token: token,\n                  expiresAt: expiresAt,\n                  userInfo: userInfo\n                });\n                resetForm({});\n                setIsComponentVisible(false);\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](2);\n                setStatus(_context.t0.response.data.message);\n\n              case 16:\n                setLoading(false);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 13]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    validationSchema: Yup.object({\n      email: Yup.string().required('Required').matches(/^[a-zA-Z0-9]+@+[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$/, 'Please Enter A Valid Email')\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, function (_ref3) {\n    var values = _ref3.values,\n        errors = _ref3.errors,\n        touched = _ref3.touched,\n        status = _ref3.status,\n        handleChange = _ref3.handleChange,\n        handleBlur = _ref3.handleBlur,\n        handleSubmit = _ref3.handleSubmit,\n        isSubmitting = _ref3.isSubmitting;\n    return __jsx(\"form\", {\n      onSubmit: handleSubmit,\n      className: styles.form,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }), __jsx(\"center\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }\n    }, \"Forgot your account\\u2019s password?\")), __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }), __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, \"Enter your email address and we\\u2019ll send you a recovery link.\"), __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }), __jsx(FormInput, {\n      label: \"Email\",\n      type: \"text\",\n      name: \"email\",\n      autoComplete: \"off\",\n      value: values.email,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      hasError: touched.email && errors.email,\n      errorMessage: errors.email && errors.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }), __jsx(\"p\", {\n      className: styles.status,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, status), __jsx(Button, {\n      primary: true,\n      full: true,\n      className: styles.submitButton,\n      type: \"changePassword\",\n      isLoading: loading,\n      disabled: isSubmitting,\n      onClick: function onClick() {\n        changeClass(values.email);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, \"Send recovery email\"), __jsx(\"p\", {\n      className: styles.forgotContent,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }), __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }), __jsx(\"center\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      className: isSent ? styles.forgotContentShow : styles.forgotContent,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }\n    }, \"Password Recovery Mail Sent\")));\n  });\n};\n\n_s(ForgotPasswordForm, \"dkyvkEJCOaZwRXC9AQRMyPjFYgU=\");\n\n_c = ForgotPasswordForm;\nexport default ForgotPasswordForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgotPasswordForm\");","map":{"version":3,"sources":["F:/StackoverflowClone/client/components/auth-forms/forgot-password/index.js"],"names":["React","useState","useContext","Formik","validateYupSchema","Yup","publicFetch","AuthContext","ModalContext","FormInput","Button","styles","ForgotPasswordForm","setAuthState","setIsComponentVisible","isSent","setSent","loading","setLoading","changeClass","val","match","email","values","setStatus","resetForm","post","data","token","expiresAt","userInfo","response","message","object","string","required","matches","errors","touched","status","handleChange","handleBlur","handleSubmit","isSubmitting","form","submitButton","forgotContent","forgotContentShow"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,SAASC,MAAT,EAAiBC,iBAAjB,QAA0C,QAA1C;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,MAAP,MAAmB,8BAAnB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAAA;;AAAA,oBACNV,UAAU,CAACK,WAAD,CADJ;AAAA,MACvBM,YADuB,eACvBA,YADuB;;AAAA,qBAEGX,UAAU,CAACM,YAAD,CAFb;AAAA,MAEvBM,qBAFuB,gBAEvBA,qBAFuB;;AAAA,kBAGHb,QAAQ,CAAC,KAAD,CAHL;AAAA,MAGvBc,MAHuB;AAAA,MAGfC,OAHe;;AAAA,mBAIDf,QAAQ,CAAC,KAAD,CAJP;AAAA,MAIxBgB,OAJwB;AAAA,MAIfC,UAJe;;AAK/B,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAS;AAC1BA,IAAAA,GAAG,CAACC,KAAJ,CAAU,4CAAV,IACAL,OAAO,CAAC,IAAD,CADP,GACgBA,OAAO,CAAC,KAAD,CADvB;AAEF,GAHD;;AAIA,SACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEM,MAAAA,KAAK,EAAE;AAAT,KADjB;AAEE,IAAA,QAAQ;AAAA,2EAAE,iBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAiBC,gBAAAA,SAAjB,QAAiBA,SAAjB,EAA4BC,SAA5B,QAA4BA,SAA5B;AACRP,gBAAAA,UAAU,CAAC,IAAD,CAAV;AADQ;AAAA;AAAA,uBAGiBZ,WAAW,CAACoB,IAAZ,CAAiB,cAAjB,EAAiCH,MAAjC,CAHjB;;AAAA;AAAA;AAGEI,gBAAAA,IAHF,yBAGEA,IAHF;AAIEC,gBAAAA,KAJF,GAIiCD,IAJjC,CAIEC,KAJF,EAISC,SAJT,GAIiCF,IAJjC,CAISE,SAJT,EAIoBC,QAJpB,GAIiCH,IAJjC,CAIoBG,QAJpB;AAKNjB,gBAAAA,YAAY,CAAC;AAAEe,kBAAAA,KAAK,EAALA,KAAF;AAASC,kBAAAA,SAAS,EAATA,SAAT;AAAoBC,kBAAAA,QAAQ,EAARA;AAApB,iBAAD,CAAZ;AACAL,gBAAAA,SAAS,CAAC,EAAD,CAAT;AACAX,gBAAAA,qBAAqB,CAAC,KAAD,CAArB;AAPM;AAAA;;AAAA;AAAA;AAAA;AASNU,gBAAAA,SAAS,CAAC,YAAMO,QAAN,CAAeJ,IAAf,CAAoBK,OAArB,CAAT;;AATM;AAWRd,gBAAAA,UAAU,CAAC,KAAD,CAAV;;AAXQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OAFV;AAeE,IAAA,gBAAgB,EAAEb,GAAG,CAAC4B,MAAJ,CAAW;AAC3BX,MAAAA,KAAK,EAAEjB,GAAG,CAAC6B,MAAJ,GACJC,QADI,CACK,UADL,EAEJC,OAFI,CAEI,4CAFJ,EAEkD,4BAFlD;AADoB,KAAX,CAfpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAqBG;AAAA,QACCb,MADD,SACCA,MADD;AAAA,QAECc,MAFD,SAECA,MAFD;AAAA,QAGCC,OAHD,SAGCA,OAHD;AAAA,QAICC,MAJD,SAICA,MAJD;AAAA,QAKCC,YALD,SAKCA,YALD;AAAA,QAMCC,UAND,SAMCA,UAND;AAAA,QAOCC,YAPD,SAOCA,YAPD;AAAA,QAQCC,YARD,SAQCA,YARD;AAAA,WAUC;AAAM,MAAA,QAAQ,EAAED,YAAhB;AAA8B,MAAA,SAAS,EAAE/B,MAAM,CAACiC,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAR,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,EAME,MAAC,SAAD;AACE,MAAA,KAAK,EAAC,OADR;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,YAAY,EAAC,KAJf;AAKE,MAAA,KAAK,EAAErB,MAAM,CAACD,KALhB;AAME,MAAA,QAAQ,EAAEkB,YANZ;AAOE,MAAA,MAAM,EAAEC,UAPV;AAQE,MAAA,QAAQ,EAAEH,OAAO,CAAChB,KAAR,IAAiBe,MAAM,CAACf,KARpC;AASE,MAAA,YAAY,EAAEe,MAAM,CAACf,KAAP,IAAgBe,MAAM,CAACf,KATvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAiBE;AAAG,MAAA,SAAS,EAAEX,MAAM,CAAC4B,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8BA,MAA9B,CAjBF,EAkBE,MAAC,MAAD;AACE,MAAA,OAAO,MADT;AAEE,MAAA,IAAI,MAFN;AAGE,MAAA,SAAS,EAAE5B,MAAM,CAACkC,YAHpB;AAIE,MAAA,IAAI,EAAC,gBAJP;AAKE,MAAA,SAAS,EAAE5B,OALb;AAME,MAAA,QAAQ,EAAE0B,YANZ;AAOE,MAAA,OAAO,EAAE,mBAAI;AAACxB,QAAAA,WAAW,CAACI,MAAM,CAACD,KAAR,CAAX;AAA0B,OAP1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAlBF,EA6BE;AAAG,MAAA,SAAS,EAAEX,MAAM,CAACmC,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BF,EA8BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BF,EA+BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQ;AAAG,MAAA,SAAS,EAAE/B,MAAM,GAAGJ,MAAM,CAACoC,iBAAV,GAA8BpC,MAAM,CAACmC,aAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAR,CA/BF,CAVD;AAAA,GArBH,CADF;AAoED,CA7ED;;GAAMlC,kB;;KAAAA,kB;AA+EN,eAAeA,kBAAf","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { Formik, validateYupSchema } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nimport { publicFetch } from '../../../util/fetcher'\r\nimport { AuthContext } from '../../../store/auth'\r\nimport ModalContext from '../../../store/modal'\r\n\r\nimport FormInput from '../../form-input'\r\nimport Button from '../../button'\r\n\r\nimport styles from './forgot-password.module.css'\r\n\r\nconst ForgotPasswordForm = () => {\r\n  const { setAuthState } = useContext(AuthContext)\r\n  const { setIsComponentVisible } = useContext(ModalContext)\r\n  const [ isSent, setSent ] = useState(false)\r\n  const [loading, setLoading] = useState(false);\r\n  const changeClass = (val) => {\r\n     val.match(/^[a-zA-Z0-9]+@+[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$/) ?\r\n     setSent(true) : setSent(false)\r\n  };\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: '' }}\r\n      onSubmit={async (values, { setStatus, resetForm }) => {\r\n        setLoading(true)\r\n        try {\r\n          const { data } = await publicFetch.post('authenticate', values)\r\n          const { token, expiresAt, userInfo } = data\r\n          setAuthState({ token, expiresAt, userInfo })\r\n          resetForm({})\r\n          setIsComponentVisible(false)\r\n        } catch (error) {\r\n          setStatus(error.response.data.message)\r\n        }\r\n        setLoading(false)\r\n      }}\r\n      validationSchema={Yup.object({\r\n        email: Yup.string()\r\n          .required('Required')\r\n          .matches(/^[a-zA-Z0-9]+@+[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$/, 'Please Enter A Valid Email'),\r\n      })}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        status,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting\r\n      }) => (\r\n        <form onSubmit={handleSubmit} className={styles.form}>\r\n          <br />\r\n          <center><p>Forgot your account’s password?</p></center>\r\n          <br />\r\n          <p>Enter your email address and we’ll send you a recovery link.</p>\r\n          <br />\r\n          <FormInput\r\n            label=\"Email\"\r\n            type=\"text\"\r\n            name=\"email\"\r\n            autoComplete=\"off\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            hasError={touched.email && errors.email}\r\n            errorMessage={errors.email && errors.email}\r\n          />\r\n          <p className={styles.status}>{status}</p>\r\n          <Button\r\n            primary\r\n            full\r\n            className={styles.submitButton}\r\n            type=\"changePassword\"\r\n            isLoading={loading}\r\n            disabled={isSubmitting}\r\n            onClick={()=>{changeClass(values.email)}}\r\n          >\r\n            Send recovery email\r\n          </Button>\r\n          <p className={styles.forgotContent}></p>\r\n          <br/>\r\n          <center><p className={isSent ? styles.forgotContentShow : styles.forgotContent }>Password Recovery Mail Sent</p></center>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default ForgotPasswordForm\r\n"]},"metadata":{},"sourceType":"module"}