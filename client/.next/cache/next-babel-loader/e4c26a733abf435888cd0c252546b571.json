{"ast":null,"code":"var _jsxFileName = \"F:\\\\StackoverflowClone\\\\client\\\\pages\\\\questions\\\\[slug].js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../../util/fetcher';\nimport Layout from '../../components/layout';\nimport PageTitle from '../../components/page-title';\nimport DetailPageContainer from '../../components/detail-page-container';\nimport PostWrapper from '../../components/post/post-wrapper';\nimport PostVote from '../../components/post/post-vote';\nimport PostSummary from '../../components/post/post-summary';\nimport CommentList from '../../components/post/comment-list';\nimport CommentItem from '../../components/post/comment-list/comment-item';\nimport AnswerContainer from '../../components/answer-container';\nimport AddAnswer from '../../components/add-answer';\nimport { Spinner } from '../../components/icons';\n\nconst QuestionDetail = ({\n  questionId,\n  title\n}) => {\n  const {\n    0: question,\n    1: setQuestion\n  } = useState(null);\n  const {\n    0: answerSortType,\n    1: setAnswersSortType\n  } = useState('Votes');\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const {\n        data\n      } = await publicFetch.get(`/question/${questionId}`);\n      setQuestion(data);\n    };\n\n    fetchQuestion();\n  }, []);\n\n  const handleSorting = () => {\n    switch (answerSortType) {\n      case 'Votes':\n        return (a, b) => b.score - a.score;\n\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created);\n\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created);\n\n      default:\n        break;\n    }\n  };\n\n  const isClient = false;\n  return __jsx(Layout, {\n    extra: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, title), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: isClient && window.location.href,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })), __jsx(PageTitle, {\n    title: title,\n    button: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), __jsx(DetailPageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, !question && __jsx(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  })), question && __jsx(React.Fragment, null, __jsx(PostWrapper, {\n    borderBottom: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, __jsx(PostVote, {\n    score: question.score,\n    votes: question.votes,\n    questionId: questionId,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }), __jsx(PostSummary, {\n    tags: question.tags,\n    author: question.author,\n    created: question.created,\n    questionId: questionId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, question.text), __jsx(CommentList, {\n    questionId: questionId,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }, question.comments.map(({\n    id,\n    author,\n    created,\n    body\n  }) => __jsx(CommentItem, {\n    key: id,\n    commentId: id,\n    questionId: questionId,\n    author: author.username,\n    isOwner: author.username === question.author.username,\n    created: created,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 19\n    }\n  }, body)))), question.answers.length > 0 && __jsx(AnswerContainer, {\n    answersCount: question.answers.length,\n    answerSortType: answerSortType,\n    setAnswerSortType: setAnswersSortType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, question.answers.sort(handleSorting()).map(answer => __jsx(PostWrapper, {\n    key: answer.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  }, __jsx(PostVote, {\n    score: answer.score,\n    votes: answer.votes,\n    answerId: answer.id,\n    questionId: questionId,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }), __jsx(PostSummary, {\n    author: answer.author,\n    created: answer.created,\n    questionId: questionId,\n    answerId: answer.id,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, answer.text), __jsx(CommentList, {\n    questionId: questionId,\n    answerId: answer.id,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, answer.comments.map(({\n    id,\n    author,\n    created,\n    body\n  }) => __jsx(CommentItem, {\n    key: id,\n    commentId: id,\n    questionId: questionId,\n    answerId: answer.id,\n    author: author.username,\n    isOwner: author.username === question.author.username,\n    created: created,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }\n  }, body)))))), __jsx(AddAnswer, {\n    tags: question.tags,\n    id: questionId,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport async function getServerSideProps(context) {\n  const slug = context.params.slug;\n  const questionId = slug.split('-').shift();\n  const title = slug === null || slug === void 0 ? void 0 : slug.substr(slug.indexOf('-') + 1).split('-').join(' ');\n  return {\n    props: {\n      questionId,\n      title\n    }\n  };\n}\nexport default QuestionDetail;","map":{"version":3,"sources":["F:/StackoverflowClone/client/pages/questions/[slug].js"],"names":["React","useEffect","useState","Head","publicFetch","Layout","PageTitle","DetailPageContainer","PostWrapper","PostVote","PostSummary","CommentList","CommentItem","AnswerContainer","AddAnswer","Spinner","QuestionDetail","questionId","title","question","setQuestion","answerSortType","setAnswersSortType","fetchQuestion","data","get","handleSorting","a","b","score","Date","created","isClient","window","location","href","votes","tags","author","text","comments","map","id","body","username","answers","length","sort","answer","getServerSideProps","context","slug","params","split","shift","substr","indexOf","join","props"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Head from 'next/head'\r\n\r\nimport { publicFetch } from '../../util/fetcher'\r\n\r\nimport Layout from '../../components/layout'\r\nimport PageTitle from '../../components/page-title'\r\nimport DetailPageContainer from '../../components/detail-page-container'\r\nimport PostWrapper from '../../components/post/post-wrapper'\r\nimport PostVote from '../../components/post/post-vote'\r\nimport PostSummary from '../../components/post/post-summary'\r\nimport CommentList from '../../components/post/comment-list'\r\nimport CommentItem from '../../components/post/comment-list/comment-item'\r\nimport AnswerContainer from '../../components/answer-container'\r\nimport AddAnswer from '../../components/add-answer'\r\nimport { Spinner } from '../../components/icons'\r\n\r\nconst QuestionDetail = ({ questionId, title }) => {\r\n  const [question, setQuestion] = useState(null)\r\n  const [answerSortType, setAnswersSortType] = useState('Votes')\r\n\r\n  useEffect(() => {\r\n    const fetchQuestion = async () => {\r\n      const { data } = await publicFetch.get(`/question/${questionId}`)\r\n      setQuestion(data)\r\n    }\r\n\r\n    fetchQuestion()\r\n  }, [])\r\n\r\n  const handleSorting = () => {\r\n    switch (answerSortType) {\r\n      case 'Votes':\r\n        return (a, b) => b.score - a.score\r\n      case 'Newest':\r\n        return (a, b) => new Date(b.created) - new Date(a.created)\r\n      case 'Oldest':\r\n        return (a, b) => new Date(a.created) - new Date(b.created)\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const isClient = typeof window === 'object'\r\n\r\n  return (\r\n    <Layout extra={false}>\r\n      <Head>\r\n        <title>{title}</title>\r\n        <link rel=\"canonical\" href={isClient && window.location.href}></link>\r\n      </Head>\r\n\r\n      <PageTitle title={title} button />\r\n\r\n      <DetailPageContainer>\r\n        {!question && (\r\n          <div className=\"loading\">\r\n            <Spinner />\r\n          </div>\r\n        )}\r\n\r\n        {question && (\r\n          <>\r\n            <PostWrapper borderBottom={false}>\r\n              <PostVote\r\n                score={question.score}\r\n                votes={question.votes}\r\n                questionId={questionId}\r\n                setQuestion={setQuestion}\r\n              />\r\n              <PostSummary\r\n                tags={question.tags}\r\n                author={question.author}\r\n                created={question.created}\r\n                questionId={questionId}\r\n              >\r\n                {question.text}\r\n              </PostSummary>\r\n              <CommentList questionId={questionId} setQuestion={setQuestion}>\r\n                {question.comments.map(({ id, author, created, body }) => (\r\n                  <CommentItem\r\n                    key={id}\r\n                    commentId={id}\r\n                    questionId={questionId}\r\n                    author={author.username}\r\n                    isOwner={author.username === question.author.username}\r\n                    created={created}\r\n                    setQuestion={setQuestion}\r\n                  >\r\n                    {body}\r\n                  </CommentItem>\r\n                ))}\r\n              </CommentList>\r\n            </PostWrapper>\r\n\r\n            {question.answers.length > 0 && (\r\n              <AnswerContainer\r\n                answersCount={question.answers.length}\r\n                answerSortType={answerSortType}\r\n                setAnswerSortType={setAnswersSortType}\r\n              >\r\n                {question.answers.sort(handleSorting()).map((answer) => (\r\n                  <PostWrapper key={answer.id}>\r\n                    <PostVote\r\n                      score={answer.score}\r\n                      votes={answer.votes}\r\n                      answerId={answer.id}\r\n                      questionId={questionId}\r\n                      setQuestion={setQuestion}\r\n                    />\r\n                    <PostSummary\r\n                      author={answer.author}\r\n                      created={answer.created}\r\n                      questionId={questionId}\r\n                      answerId={answer.id}\r\n                      setQuestion={setQuestion}\r\n                    >\r\n                      {answer.text}\r\n                    </PostSummary>\r\n                    <CommentList\r\n                      questionId={questionId}\r\n                      answerId={answer.id}\r\n                      setQuestion={setQuestion}\r\n                    >\r\n                      {answer.comments.map(({ id, author, created, body }) => (\r\n                        <CommentItem\r\n                          key={id}\r\n                          commentId={id}\r\n                          questionId={questionId}\r\n                          answerId={answer.id}\r\n                          author={author.username}\r\n                          isOwner={author.username === question.author.username}\r\n                          created={created}\r\n                          setQuestion={setQuestion}\r\n                        >\r\n                          {body}\r\n                        </CommentItem>\r\n                      ))}\r\n                    </CommentList>\r\n                  </PostWrapper>\r\n                ))}\r\n              </AnswerContainer>\r\n            )}\r\n\r\n            <AddAnswer\r\n              tags={question.tags}\r\n              id={questionId}\r\n              setQuestion={setQuestion}\r\n            />\r\n          </>\r\n        )}\r\n      </DetailPageContainer>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n  const slug = context.params.slug\r\n  const questionId = slug.split('-').shift()\r\n  const title = slug\r\n    ?.substr(slug.indexOf('-') + 1)\r\n    .split('-')\r\n    .join(' ')\r\n\r\n  return {\r\n    props: {\r\n      questionId,\r\n      title\r\n    }\r\n  }\r\n}\r\n\r\nexport default QuestionDetail\r\n"]},"metadata":{},"sourceType":"module"}