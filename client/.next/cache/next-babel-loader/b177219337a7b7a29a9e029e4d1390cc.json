{"ast":null,"code":"var _jsxFileName = \"F:\\\\StackoverflowClone\\\\client\\\\components\\\\question-ask-view\\\\question-form\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { FetchContext } from '../../../store/fetch';\nimport Button from '../../button';\nimport Textarea from '../../textarea';\nimport FormInput from '../../form-input';\nimport TagInput from '../../tag-input';\nimport styles from './question-form.module.css';\n\nconst QuestionForm = () => {\n  const router = useRouter();\n  const {\n    authAxios\n  } = useContext(FetchContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  return __jsx(Formik, {\n    initialValues: {\n      title: '',\n      text: '',\n      tags: []\n    },\n    onSubmit: async (values, {\n      setStatus,\n      resetForm\n    }) => {\n      setLoading(true);\n\n      try {\n        await authAxios.post('questions', values);\n        resetForm({});\n        router.push('/');\n      } catch (error) {\n        setStatus(error.response.data.message);\n      }\n\n      setLoading(false);\n    },\n    validationSchema: Yup.object({\n      title: Yup.string().required('Title is missing.').max(150, 'Title cannot be longer than 150 characters.').min(15, 'Title must be at least 15 characters.'),\n      text: Yup.string().required('Body is missing.').min(30, 'Body must be at least 30 characters.').max(30000, 'Body cannot be longer than 30000 characters.'),\n      tags: Yup.array().required('Please enter at least one tag.').max(5, 'Please enter no more than 5 tags.').of(Yup.string().max(15, 'Tag cannot be longer than 15 characters. '))\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    status,\n    handleChange,\n    setFieldValue,\n    handleBlur,\n    handleSubmit,\n    isSubmitting\n  }) => __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, __jsx(FormInput, {\n    label: \"Title\",\n    inputInfo: \"Be specific and imagine you\\u2019re asking a question to another person\",\n    type: \"text\",\n    name: \"title\",\n    autoComplete: \"off\",\n    value: values.title,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.title && errors.title,\n    errorMessage: errors.title && errors.title,\n    placeholder: \"e.g Is there an R function for finding the index of an element in a vendor?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), __jsx(Textarea, {\n    label: \"Body\",\n    inputInfo: \"Include all the information someone would need to answer your question\",\n    name: \"text\",\n    autoComplete: \"off\",\n    value: values.text,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    hasError: touched.text && errors.text,\n    errorMessage: errors.text && errors.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), __jsx(TagInput, {\n    label: \"Tags\",\n    inputInfo: \"Add up to 5 tags to describe what your question is about\",\n    type: \"text\",\n    name: \"tags\",\n    value: values.tags,\n    onChange: e => setFieldValue('tags', e, true),\n    onBlur: handleBlur,\n    hasError: touched.tags && errors.tags,\n    errorMessage: errors.tags && errors.tags,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    className: styles.buttonContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    className: styles.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, status), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, __jsx(Button, {\n    type: \"submit\",\n    primary: true,\n    isLoading: loading,\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, \"Review your question\")))));\n};\n\nexport default QuestionForm;","map":{"version":3,"sources":["F:/StackoverflowClone/client/components/question-ask-view/question-form/index.js"],"names":["React","useState","useContext","useRouter","Formik","Yup","FetchContext","Button","Textarea","FormInput","TagInput","styles","QuestionForm","router","authAxios","loading","setLoading","title","text","tags","values","setStatus","resetForm","post","push","error","response","data","message","object","string","required","max","min","array","of","errors","touched","status","handleChange","setFieldValue","handleBlur","handleSubmit","isSubmitting","container","e","buttonContainer"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport { useRouter } from 'next/router'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\n\r\nimport { FetchContext } from '../../../store/fetch'\r\n\r\nimport Button from '../../button'\r\nimport Textarea from '../../textarea'\r\nimport FormInput from '../../form-input'\r\nimport TagInput from '../../tag-input'\r\n\r\nimport styles from './question-form.module.css'\r\n\r\nconst QuestionForm = () => {\r\n  const router = useRouter()\r\n  const { authAxios } = useContext(FetchContext)\r\n\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ title: '', text: '', tags: [] }}\r\n      onSubmit={async (values, { setStatus, resetForm }) => {\r\n        setLoading(true)\r\n        try {\r\n          await authAxios.post('questions', values)\r\n          resetForm({})\r\n          router.push('/')\r\n        } catch (error) {\r\n          setStatus(error.response.data.message)\r\n        }\r\n        setLoading(false)\r\n      }}\r\n      validationSchema={Yup.object({\r\n        title: Yup.string()\r\n          .required('Title is missing.')\r\n          .max(150, 'Title cannot be longer than 150 characters.')\r\n          .min(15, 'Title must be at least 15 characters.'),\r\n        text: Yup.string()\r\n          .required('Body is missing.')\r\n          .min(30, 'Body must be at least 30 characters.')\r\n          .max(30000, 'Body cannot be longer than 30000 characters.'),\r\n        tags: Yup.array()\r\n          .required('Please enter at least one tag.')\r\n          .max(5, 'Please enter no more than 5 tags.')\r\n          .of(Yup.string().max(15, 'Tag cannot be longer than 15 characters. '))\r\n      })}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        status,\r\n        handleChange,\r\n        setFieldValue,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting\r\n      }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <div className={styles.container}>\r\n            <FormInput\r\n              label=\"Title\"\r\n              inputInfo=\"Be specific and imagine you’re asking a question to another person\"\r\n              type=\"text\"\r\n              name=\"title\"\r\n              autoComplete=\"off\"\r\n              value={values.title}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              hasError={touched.title && errors.title}\r\n              errorMessage={errors.title && errors.title}\r\n              placeholder=\"e.g Is there an R function for finding the index of an element in a vendor?\"\r\n            />\r\n            <Textarea\r\n              label=\"Body\"\r\n              inputInfo=\"Include all the information someone would need to answer your question\"\r\n              name=\"text\"\r\n              autoComplete=\"off\"\r\n              value={values.text}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              hasError={touched.text && errors.text}\r\n              errorMessage={errors.text && errors.text}\r\n            />\r\n            <TagInput\r\n              label=\"Tags\"\r\n              inputInfo=\"Add up to 5 tags to describe what your question is about\"\r\n              type=\"text\"\r\n              name=\"tags\"\r\n              value={values.tags}\r\n              onChange={(e) => setFieldValue('tags', e, true)}\r\n              onBlur={handleBlur}\r\n              hasError={touched.tags && errors.tags}\r\n              errorMessage={errors.tags && errors.tags}\r\n            />\r\n          </div>\r\n          <div className={styles.buttonContainer}>\r\n            <p className={styles.status}>{status}</p>\r\n            <div>\r\n              <Button\r\n                type=\"submit\"\r\n                primary\r\n                isLoading={loading}\r\n                disabled={isSubmitting}\r\n              >\r\n                Review your question\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n\r\nexport default QuestionForm\r\n"]},"metadata":{},"sourceType":"module"}