{"ast":null,"code":"var _jsxFileName = \"F:\\\\StackoverflowClone\\\\client\\\\pages\\\\tags.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../util/fetcher';\nimport Layout from '../components/layout';\nimport PageTitle from '../components/page-title';\nimport SearchInput from '../components/search-input';\nimport TagList from '../components/tag-list';\nimport TagItem from '../components/tag-list/tag-item';\nimport { Spinner } from '../components/icons';\n\nfunction TagsPage() {\n  const {\n    0: searchTerm,\n    1: setSearchTerm\n  } = useState(null);\n  const {\n    0: tags,\n    1: setTags\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  useEffect(() => {\n    if (searchTerm === null) {\n      const fetchUser = async () => {\n        const {\n          data\n        } = await publicFetch.get('/tags');\n        setTags(data);\n      };\n\n      fetchUser();\n    } else {\n      const delayDebounceFn = setTimeout(async () => {\n        setLoading(true);\n        const {\n          data\n        } = await publicFetch.get(searchTerm ? `/tags/${searchTerm}` : `/tags`);\n        setTags(data);\n        setLoading(false);\n      }, 500);\n      return () => clearTimeout(delayDebounceFn);\n    }\n  }, [searchTerm]);\n  return __jsx(Layout, {\n    extra: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"Tags - Clone of Stackoverflow\")), __jsx(PageTitle, {\n    title: \"Tags\",\n    borderBottom: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \"A tag is a keyword or label that categorizes your question with other, similar questions. Using the right tags makes it easier for others to find and answer your question.\"), __jsx(SearchInput, {\n    placeholder: \"Filter by tag name\",\n    autoFocus: true,\n    isLoading: loading,\n    autoComplete: \"off\",\n    type: \"text\",\n    onChange: e => setSearchTerm(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), !tags && __jsx(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  })), tags && __jsx(React.Fragment, null, __jsx(TagList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, tags === null || tags === void 0 ? void 0 : tags.map(({\n    count,\n    _id\n  }) => __jsx(TagItem, {\n    key: _id,\n    count: count,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, _id))), tags.length == 0 && __jsx(\"p\", {\n    className: \"not-found\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 32\n    }\n  }, \"No tags matched your search.\")));\n}\n\nexport default TagsPage;","map":{"version":3,"sources":["F:/StackoverflowClone/client/pages/tags.js"],"names":["React","useEffect","useState","Head","publicFetch","Layout","PageTitle","SearchInput","TagList","TagItem","Spinner","TagsPage","searchTerm","setSearchTerm","tags","setTags","loading","setLoading","fetchUser","data","get","delayDebounceFn","setTimeout","clearTimeout","e","target","value","map","count","_id","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Head from 'next/head'\r\n\r\nimport { publicFetch } from '../util/fetcher'\r\n\r\nimport Layout from '../components/layout'\r\nimport PageTitle from '../components/page-title'\r\nimport SearchInput from '../components/search-input'\r\nimport TagList from '../components/tag-list'\r\nimport TagItem from '../components/tag-list/tag-item'\r\nimport { Spinner } from '../components/icons'\r\n\r\nfunction TagsPage() {\r\n  const [searchTerm, setSearchTerm] = useState(null)\r\n  const [tags, setTags] = useState(null)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (searchTerm === null) {\r\n      const fetchUser = async () => {\r\n        const { data } = await publicFetch.get('/tags')\r\n        setTags(data)\r\n      }\r\n\r\n      fetchUser()\r\n    } else {\r\n      const delayDebounceFn = setTimeout(async () => {\r\n        setLoading(true)\r\n        const { data } = await publicFetch.get(\r\n          searchTerm ? `/tags/${searchTerm}` : `/tags`\r\n        )\r\n        setTags(data)\r\n        setLoading(false)\r\n      }, 500)\r\n\r\n      return () => clearTimeout(delayDebounceFn)\r\n    }\r\n  }, [searchTerm])\r\n\r\n  return (\r\n    <Layout extra={false}>\r\n      <Head>\r\n        <title>Tags - Clone of Stackoverflow</title>\r\n      </Head>\r\n\r\n      <PageTitle title=\"Tags\" borderBottom={false}>\r\n        A tag is a keyword or label that categorizes your question with other,\r\n        similar questions. Using the right tags makes it easier for others to\r\n        find and answer your question.\r\n      </PageTitle>\r\n\r\n      <SearchInput\r\n        placeholder=\"Filter by tag name\"\r\n        autoFocus\r\n        isLoading={loading}\r\n        autoComplete=\"off\"\r\n        type=\"text\"\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n      />\r\n\r\n      {!tags && (\r\n        <div className=\"loading\">\r\n          <Spinner />\r\n        </div>\r\n      )}\r\n\r\n      {tags && (\r\n        <>\r\n          <TagList>\r\n            {tags?.map(({ count, _id }) => (\r\n              <TagItem key={_id} count={count}>\r\n                {_id}\r\n              </TagItem>\r\n            ))}\r\n          </TagList>\r\n\r\n          {tags.length == 0 && <p className=\"not-found\">No tags matched your search.</p>}\r\n        </>\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default TagsPage\r\n"]},"metadata":{},"sourceType":"module"}